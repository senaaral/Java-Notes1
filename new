19.02.2023

package csd; 
class App {
	public static void main(String [] args)
	{
		Sample s, k; //referans bildirimi sample türünden bildirdigime göre s ve knin türü sample
				// s ve k stack'te oluşturulur.
		s = new Sample(); // s'nin türü sample
		k = new Sample(); // nesne oluşturur
		
		s.x = 20; //s.x'in türü int.s referansının gösterdigi nesnenin
		s.y = true; //türü boolean
		k.x = 20; // türü int
		k.y = false; //türü boolean
		
		System.out.printf("s.x = %d%n", s.x);
		System.out.printf("s.y = %b%n", s.y);
		System.out.printf("k.x = %d%n", k.x);
		System.out.printf("k.y = %b%n", k.y);

	}
}

class Sample {
	public int x; // x ve y nesnedir.heapte oluşturulur. 
	public boolean y; //bunlar non-static veri elemanlarıdır.
	}

//her sınıf bildirimi bir tür bildirimi.
//sınıf türünden bir değişkene referans diyoruz
//s ve k referans new ile nesne oluşturduk.
// referansın içinde adres var
//neye göre static veya  non-static: kurallar belirleyecek
/*-------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------*/
// sınıf oldugu için new ile nesne oluşturulabilir.
stack                          heap  //ramda organize edilir.
-----                      ---------
s				x, y
k				x, y

s x ve y adresini gösterir. örnegin csd binasının old adres. k için de aynı durum geçerli

20. satıra geldgiimizde s.x : csd binasının 3. katına çık ve onun içinde bulunan x elemanına 10 değerini ata.
1. eşlesmede s.x ve s.y iiçin 10 ve true değerleri alınır.
2. eşlesmede k.x ve k.y için ise 20 ve false değerleri alınır.
. nokta operatörünün işlevi erişimdir. 
//her new işleminde farklı bir nesne üretilir.

/*--------------------------------------------------------------------------
----------------------------------------------------------------------
//bir referansın illa adres tutması gerekmez. aşağıdaki hata nesne oluşturmama hatası değildir. 
s yerel değişkenine değer atanmadan kullanıldıgı için error oluşur. bu bir initialization hatası

package csd; 
class App {
	public static void main(String [] args)
	{
		Sample s;
		
		s.x = 10;

	}
}

class Sample {
	public int x;  
	public boolean y;
	}
/*--------------------------------------------------------------------------
Farklı türden referanslar birbirlerine explicit olarak  BİLE atanamazlar.
---------------------------------------------------------------------*/

/*----------------------------------------------------------------------------------
non-static veri elemanlarına nesnenin oluşturulması aşamasında default değerler atanır. 
Aşagıdaki örnekte s.x için 0 değeri s.y için ise false değeri default olarak atanır.
-------------------------------------------------------------------*/ 

package csd; 
class App {
	public static void main(String [] args)
	{
		Sample s, k;
		
		s = new Sample();
		k = new Sample(); 
		
		System.out.printf("s.x = %d%n", s.x);
		System.out.printf("s.y = %b%n", s.y);
		System.out.printf("k.x = %d%n", k.x);
		System.out.printf("k.y = %b%n", k.y);
	}
}

class Sample {
	public int x;  
	public boolean y;
	}
	
/*-----------------------------------------------------------------------------------------------------------------------------
Bir nesnenin uzunluğu yani bellekte kapladığı alan "en az non-static veeri elemanlarının toplam uzunluğu kadardır.
Bu durumda aynı türden nesneler için aynı uzunlukta yer ayrılır.Sample turunden nesnenin uzunlugu 4 + boolean türünün uzunluğu kadardır.
Farklı türden nesneler için farklı veri elemanları olabileceğinden aynı uzunlukta yer ayrılması gerekmez. bir nesnenin uzunluğu
içindeki veri elemanlarının uzunluğu kadardır. 
her referansın uzunlugu aynı türü ne olursa olsun. 64 bit sistemde 8 byte  toplam 2^64 tane gözenek var. 

Türü ne olursa olsun referans değişkenlerin uzunlukları aynıdır. Bu da adreslenebilecek sayıları tutabilecek uzunluktur. Örneğin 64 bit 
sistemlerde referanslar 64 bit yani 8 byte uzunluğundadır. Benzer şekilde 32 bit sistemlerde tüm referanslar 32bit yani (4 byte) 
uzunlugundadır.
---------------------------------------------------------------------------------------------------------------------------*/
package csd; 
class App {
	public static void main(String [] args)
	{
		Sample s, k;
		
		s = new Sample();
		k = new Sample(); 
		
		System.out.printf("s.x = %d%n", s.x);
		System.out.printf("s.y = %b%n", s.y);
		System.out.printf("k.x = %d%n", k.x);
		System.out.printf("k.y = %b%n", k.y);
	}
}

class Sample {
	public int x;  
	public boolean y;
	}

class Mample {
	public float x; 
	public char y;
}


/*------------------------------------------------------------------------------------------------------------------
Aynı türden iki referansın birbirine atanması durumunda iki referans da artık aynı nesneyi gösterir duruma gelir. 
Bu durumda artık hangi referansla nesneye erişildiğinin bir önemi yotur. Aşağıdaki örnekte ** ile belirtilen ifadede s referansı gösterdiği
nesneden kopartılmış ve k'nın içerisindeki adres atandığından artık k ve s aynı nesneyi 
gösterir duruma gelmiştir. 

stack                       heap
-----			----------
s			   x,y
k			   x,y                   //s ve k parametre değşkenleri stackte oluşturulur.
Aşağıdaki örnekte s= k denildiginde s.x = 30 s.y = false değerini üreticektir. c derneğinin postit kagıdını k sye vermis oldu.

package csd; 
class App {
	public static void main(String [] args)
	{
		Sample s, k;
		
		s = new Sample();
		k = new Sample(); 
		
		s.x = 10; 
		s.y = true;
		k.x = 30;
		
		System.out.printf("s.x = %d%n", s.x);
		System.out.printf("s.y = %b%n", s.y);
		System.out.printf("k.x = %d%n", k.x);
		System.out.printf("k.y = %b%n", k.y);
		System.out.println("---------------------------");
		
		s = k ;  //**
		
		System.out.printf("s.x = %d%n", s.x);
		System.out.printf("s.y = %b%n", s.y);
		System.out.printf("k.x = %d%n", k.x);
		System.out.printf("k.y = %b%n", k.y);
		System.out.println("---------------------------");
	}
}

class Sample {
	public int x;  
	public boolean y;
	}

class Mample {
	public float x; 
	public char y;
}
--------------------------------------------------------------------------------------------------------------*/

/*---------------------------------------------------------------------------------------------------------------
Bir sınıf aslında bir takım non-static veri elemanlarından oluşan bileşik bir türdür.Gün ay yıl bir arada oldunugunda tarihi oluşturur.
Date türü day month yeardan oluşmalıdır. 

/*-----------------------------------------------------------------------------------
 Bir metodun parametre değişkeni bir referans olabilri.
 Bu durumda metot aynı türden bir referans ile çağırılabilir.
 -------------------------------------------------------------------------------------*/
 package csd; 

class App {
	public static void main(String [] args)
	{
		Time time; //referans tanımı
		time = new Time(); //nesneyi olusturduk
		
		time.hour = 19; //bunlar birer değişken
		time.minute = 19;
		time.second = 14;
		time.millisecond = 234;
		
		TimeUtil.printTime(time);
	}
}

class TimeUtil {
	public static void printTime(Time time)
	{
		System.out.printf("%02d:%02d:%02d.%03d", time.hour, time.minute, time.second, time.millisecond);
	}
}

class Time {
	public int hour;
	public int minute;
	public int second;
	public int millisecond; // time tek başına bir türdür.hour tek başına bir tür belirtmez
	//bir kisinin adının olması ogrenci old anlamına gelmez. numarası da olmalıdır.
	//sınıf ve nesne bunun bilesenleri
	// time türünden değişkene time türden bir referans argümanına ihtiyaç vardır.
}
//metod çağırılırken argümanlardan parametrelere aktarım oluyor. metot nesne olusturup referansına dönüyor.
//iki tane aynı türden bir referans birbirine atanırsa  time hour = hour;

/*----------------------------------------------------------------------------------------------------------------------
	25.02.2023
-----------------------------------------------------------------------------------------------------------------------*/
Sınıfın static bir veri elemanı bir  tanedir. Bu elemanın kullanılabilmesi için nesne oluşturulması gerekmez. Veri elemanı 
sınıf içindeki bildirimlere denir. Sınıfın static bir veri elemanına sınıf dışından sınıf ismi ve nokta öperatörü ile 
erişilebilir. Sınıfın statik veri elemanları sınıfın bir elemanı ilk kez kullanıldıgında oluşturulur. Statik veri elemanı programın 
sonuna kadar yaşarlar.Static veri elemanları da heapte olusturulur. Sınıfın static veri elemanlarına da oluşturulduğunda default 
değer atanır. 


/*----------------------------------------------------------------------------------------------------------------------
package csd;

class App {
	public static void main(String [] args)
	{
		System.out.printf("Sample.x = %d%n", Sample.x);
		System.out.printf("Sample.y = %b%n", Sample.y);
		
		Sample.x = 10;
		Sample.y = true;
		
		System.out.printf("Sample.x = %d%n", Sample.x);
		System.out.printf("Sample.y = %b%n", Sample.y);
		
		
	}
}

class Sample {
	public static int x;
	public static boolean y;
}	
/*----------------------------------------------------------------------------------------------------------------------
Sınıfın non-statik veri elemanına sınıf dışında sınıf ismi ve nokta ile erişilemez.
Sınıfın static bir veri elemanına sınıf dışından referans ve nokta operatörü ile erişilebilir. Sınıf ismi ile 
erişmekten farkı yoktur. Static veri elemanlarına bu şekilde erişim tercih edilmemelidir.
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Sample s;
		
		s = new Sample();
		
		s.x = 10; //gönlümüzün erroru
		s.y = true;
		
		System.out.printf("Sample.x = %d%n", Sample.x);
		System.out.printf("Sample.y = %b%n", Sample.y);
		
		
	}
}

class Sample {
	public static int x;
	public static boolean y;
}

/*----------------------------------------------------------------------------------------------------------------------
	26.02.2023
-----------------------------------------------------------------------------------------------------------------------*/
	
/*----------------------------------------------------------------------------------------------------------------------
	Sınıfı kullanan kodlara "müşteri kod(client kod), sınıfın bildirimine ise hizmet veren (server code) denir. Bu anlamda
	sınıfı yazan programcının o sınıfa ilişkin "domain'i"(senaryo) sınıfa kullanına göre daha iyi bilmesi gerekir.
	
	Point sınıf ve test kodu
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1, p2; //p1 ve p2 referans
		
		p1 = new Point() ;
		p2 = new Point() ; //nesne olusur 
		
		p1.x = 100.4; //p1in gösterdigi nesne diyebiliriz
		p1.y = -345.89;
		p1.x = 23.56;

		p1.print();
		p2.print();
	}
}


class Point {
	public double x, y; // x ve y nesne
	//her nokta için ayrı bir nesne olacagı için yani özgün old için non-static
	
	public void print()
	{
		System.out.printf("(%.2f, %.2f)", x, y);
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	point sınıfı test kodu
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1, p2; //p1 ve p2 referans
		
		p1 = new Point() ;
		p2 = new Point() ; //nesne olusur 
		
		p1.x = 100.4; //p1in gösterdigi nesne diyebiliriz
		p1.y = -345.89;
		p1.x = 23.56;

		p1.print();
		p2.print();
		p1.offset(100, 20);
		p2.offset(-30, 10);
		p1.print();
		p2.print();
		p1.offset(20); // aynı olunca üstteki gelecek iki argümana gerek yok
		p2.offset(-10);
		p1.print();
		p2.print();
	}
}


class Point {
	public double x, y; // x ve y nesne
	//her nokta için ayrı bir nesne olacagı için yani özgün old için non-static
	
	public void offset(double dxy)
	{
		offset(dxy, dxy);
	}
	public void offset(double dx, double dy)
	{
		x += dx; // o noktanın x ve ysini kullanacak o zmaan non-statik
		y += dy;
	}
	public void print()
	{
		System.out.printf("(%.2f, %.2f)", x, y);
		System.out.println();
	}
}

/*----------------------------------------------------------------------------------------------------------------------
	point sınıfı test kodu iki nokta arasındaki uzaklıgı yazalım
-----------------------------------------------------------------------------------------------------------------------*/
package csd;

class App {
	public static void main(String [] args)
	{
		Point p1, p2; //p1 ve p2 referans
		
		p1 = new Point() ;
		p2 = new Point() ; //nesne olusur 
		
		p1.x = 100.4; //p1in gösterdigi nesne diyebiliriz
		p1.y = -345.89;
		p1.x = 23.56;

		p1.print();
		p2.print();
		p1.offset(100, 20);
		p2.offset(-30, 10);
		p1.print();
		p2.print();
		p1.offset(20); // aynı olunca üstteki gelecek iki argümana gerek yok
		p2.offset(-10);
		p1.print();
		p2.print();
		
		System.out.printf("(Distance: %.2f%n)", p1.distance(p2));
		System.out.printf("(Distance: %.2f%n)", p2.distance(97, 204));
		System.out.printf("(Distance: %.2f%n)", p2.distance());

	}
}


class Point {
	public double x, y; // x ve y nesne
	//her nokta için ayrı bir nesne olacagı için yani özgün old için non-static
	
	public double distance()
	{
		return distance(0, 0);
	}
	public double distance(double a, double b) //non-static
	{
		return Math.sqrt(Math.pow(x-a, 2) + Math.pow(y-b, 2));			//ana işi yapanı bu seçtik
	}
	public double distance(Point other)
	{
		return distance (other.x, other.y);		
	}
	public void offset(double dxy)
	{
		offset(dxy, dxy);
	}
	public void offset(double dx, double dy)
	{
		x += dx; // o noktanın x ve ysini kullanacak o zmaan non-statik
		y += dy;	//asıl işi yapan bu yukardaki bunu çağırıyor
	}
	public void print()
	{
		System.out.printf("(%.2f, %.2f)", x, y);
		System.out.println();
	}
}
